package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"

	"github.com/yuorei/anime-ranking/graph/generated"
	"github.com/yuorei/anime-ranking/graph/model"
	"github.com/yuorei/anime-ranking/service"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, input model.LoginInput) (*model.LoginResponse, error) {
	user, err := service.GetUserByName(input.Name)
	if err != nil {
		return &model.LoginResponse{Success: false}, nil
	}

	if !service.VerifyPassword(user.Password, input.Password) {
		return &model.LoginResponse{Success: false}, nil
	}

	token, err := service.JwtGenerate(ctx, user)

	if err != nil {
		return &model.LoginResponse{Success: false}, nil
	}

	return &model.LoginResponse{
		Success: true,
		Token:   &token,
	}, nil
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// AuthOps returns generated.AuthOpsResolver implementation.
func (r *Resolver) AuthOps() generated.AuthOpsResolver { return &authOpsResolver{r} }

type authOpsResolver struct{ *Resolver }
