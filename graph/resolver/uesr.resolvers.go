package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"

	"github.com/yuorei/anime-ranking/application"
	"github.com/yuorei/anime-ranking/database/mysql"
	"github.com/yuorei/anime-ranking/database/table"
	"github.com/yuorei/anime-ranking/graph/generated"
	"github.com/yuorei/anime-ranking/graph/model"
	"github.com/yuorei/anime-ranking/middlewares"
	"github.com/yuorei/anime-ranking/service"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.UserInformationInput) (*model.User, error) {
	result, err := application.AWSS3Upload(input.ProfieImage.File, input.ProfieImage.Filename)
	if err != nil {
		return nil, err
	}
	hashedPassword := service.HashPassword(input.Password)
	user := table.User{
		Name:           input.Name,
		Password:       hashedPassword,
		ProfieImageURL: result.Location,
	}

	user, err = mysql.InsertUser(user)

	userPayload := &model.User{
		UserID:         int(user.ID),
		Name:           user.Name,
		Password:       user.Password,
		ProfieImageURL: user.ProfieImageURL,
		HaveAnime:      nil,
	}
	if err != nil {
		return userPayload, err
	}

	return userPayload, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	customClaim := middlewares.CtxValue(ctx)
	oldUser, err := mysql.GetUserByID(customClaim.ID)
	if err != nil {
		return nil, err
	}
	if input.Name != nil {
		oldUser.Name = *input.Name
	}
	if input.Description != nil {
		oldUser.Description = *input.Description
	}

	if input.ProfieImage != nil {
		result, err := application.AWSS3Upload(input.ProfieImage.File, input.ProfieImage.Filename)
		if err != nil {
			return nil, err
		}
		oldUser.ProfieImageURL = result.Location
	}

	newUser, err := mysql.UpdateUser(oldUser)
	if err != nil {
		return nil, err
	}

	return &model.User{
		UserID:         int(newUser.ID),
		Name:           newUser.Name,
		Password:       newUser.Password,
		ProfieImageURL: newUser.ProfieImageURL,
		Description:    &newUser.Description,
		HaveAnime:      nil,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (*model.DeletePayload, error) {
	customClaim := middlewares.CtxValue(ctx)
	user, err := mysql.GetUserByID(customClaim.ID)
	if err != nil {
		return &model.DeletePayload{
			Success: false,
		}, err
	}

	err = mysql.DeleteUser(user)
	if err != nil {
		return &model.DeletePayload{
			Success: false,
		}, err
	}

	err = mysql.DeleteUserAllAnimeRanking(int(user.ID))
	if err != nil {
		return &model.DeletePayload{
			Success: false,
		}, err
	}
	return &model.DeletePayload{
		Success: true,
	}, nil
}

// GetAllUserInformation is the resolver for the GetAllUserInformation field.
func (r *queryResolver) GetAllUserInformation(ctx context.Context) ([]*model.User, error) {
	users, err := mysql.GetAllUsers()
	if err != nil {
		return nil, err
	}

	newUsers := make([]*model.User, len(users))
	for i, user := range users {
		newUsers[i] = &model.User{
			UserID:         int(user.ID),
			Name:           user.Name,
			Password:       user.Password,
			ProfieImageURL: user.ProfieImageURL,
		}
	}
	return newUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*model.User, error) {
	tableUser, err := mysql.GetUserByID(id)
	if err != nil {
		return nil, err
	}

	return &model.User{
		UserID:         int(tableUser.ID),
		Name:           tableUser.Name,
		Password:       tableUser.Password,
		ProfieImageURL: tableUser.ProfieImageURL,
	}, nil
}

// HaveAnime is the resolver for the haveAnime field.
func (r *userResolver) HaveAnime(ctx context.Context, obj *model.User) ([]*model.AnimeRanking, error) {
	tableAnime, err := mysql.GetHaveAnimeByUserID(int(obj.UserID))
	if err != nil {
		return nil, err
	}

	usersHaveAnime := make([]*model.AnimeRanking, len(tableAnime))
	for i, v := range tableAnime {
		description := new(string)
		*description = v.Description
		usersHaveAnime[i] = &model.AnimeRanking{
			AnimeID:       int(v.ID),
			Title:         v.Title,
			Description:   description,
			AnimeImageURL: v.AnimeImageURL,
			Rank:          v.Rank,
			User:          nil,
		}
	}

	return usersHaveAnime, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
