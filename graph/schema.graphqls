# directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Upload

type User {
  userID: Int!
  name: String!
  password:String!
  profieImageURL: String!
  haveAnime:[AnimeRanking!] @goField(forceResolver: true)
}

type AnimeRanking {
  animeInformation:AnimeInformation! @goField(forceResolver: true)
  rank: Int!
}

type AnimeInformation {
  animeID: Int!
  title: String!
  animeImageURL: String!
  # relatedAnime: [AnimeInformation!] @goField(forceResolver: true)
  registerUser: [User!] @goField(forceResolver: true)
}

type UserPayload{
  userID: Int!
  name: String!
  password: String!
  profieImageURL: String!
}

type AnimeRankingPayload{
 title: String!
 rank: Int!
 animeImageURL:String!
#  relatedAnime: [String]
}

input UserInformationInput {
  name: String!
  password: String!
  profieImage: Upload!
}

input NewAnimeRankingInput {
  title: String!
  rank: Int!
  animeImage: Upload!
  # relatedAnime: [String]
}

type Query {
  GetUserInformation: [User!]!@auth# クエリ名allとかに変える
  GetAnimeRanking: [AnimeRanking!]!# クエリ名allとかに変える
    # ランキングが持っているアニメの参照
    # アニメが持っているユーザー
    #
}

type Mutation {
  registerUser(input: UserInformationInput!): UserPayload!
  registerUserAnimeRanking(input: NewAnimeRankingInput!): AnimeRankingPayload!@auth
}
