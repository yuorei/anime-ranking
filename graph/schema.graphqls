# directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Upload

type User {
  userID: Int!
  name: String!
  password:String!
  profieImageURL: String!
  haveAnime:[AnimeRanking!] #@goField(forceResolver: true)
}

type AnimeRanking {
  # animeInformation:AnimeInformation! @goField(forceResolver: true)
  animeID: Int!
  title: String!
  description: String!
  animeImageURL: String!
  rank: Int!
  user: User!
}

input UserInformationInput {
  name: String!
  password: String!
  profieImage: Upload!
}

input NewAnimeRankingInput {
  title: String!
  description: String!
  rank: Int!
  animeImage: Upload!
  # relatedAnime: [String]
}

type Query {
  GetAllUserInformation: [User!]!# クエリ名allとかに変える
  GetAllAnimeRanking: [AnimeRanking!]!# クエリ名allとかに変える
  user(id: Int!): User
    # ランキングが持っているアニメの参照
    # アニメが持っているユーザー
    #
}

type Mutation {
  registerUser(input: UserInformationInput!): User!
  # registerUserAnimeRanking(input: NewAnimeRankingInput!): AnimeRankingPayload!@auth
  getAnimeRanking(id:Int!):AnimeRanking!
  createAnimeRanking(userId: Int!, animeRanking: NewAnimeRankingInput!): AnimeRanking!
  updateAnimeRanking(id: Int!, animeRanking: NewAnimeRankingInput!): AnimeRanking!
  deleteAnimeRanking(id: Int!): Boolean!
}
