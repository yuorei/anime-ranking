scalar Upload

type User {
  userID: Int!
  name: String!
  password:String!
  profieImageURL: String!
  description: String
  haveAnime:[AnimeRanking!] @goField(forceResolver: true)
}

type AnimeRanking {
  animeID: Int!
  title: String!
  description: String
  animeImageURL: String!
  rank: Int!
  user: User!
}

input UserInformationInput {
  name: String!
  password: String!
  description: String
  profieImage: Upload!
}

input NewAnimeRankingInput {
  title: String!
  description: String
  rank: Int!
  animeImage: Upload!
}

type Query {
  GetAllUserInformation: [User!]!
  user(id: Int!): User
  getAnimeRanking(id:Int!):AnimeRanking!
}

type Mutation {
  registerUser(input: UserInformationInput!): User!
  createAnimeRanking(input: NewAnimeRankingInput!): AnimeRanking!@auth
  updateAnimeRanking(id: Int!, input: NewAnimeRankingInput!): AnimeRanking!@auth
  deleteAnimeRanking(id: Int!): Boolean!@auth
}
