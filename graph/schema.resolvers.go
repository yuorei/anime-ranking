package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"fmt"

	"github.com/yuorei/anime-ranking/application"
	"github.com/yuorei/anime-ranking/database/mysql"
	"github.com/yuorei/anime-ranking/database/table"
	"github.com/yuorei/anime-ranking/graph/model"
	"github.com/yuorei/anime-ranking/middlewares"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.UserInformationInput) (*model.User, error) {
	result, err := application.AWSS3Upload(input.ProfieImage.File, input.ProfieImage.Filename)
	if err != nil {
		return nil, err
	}

	user := table.User{
		Name:           input.Name,
		Password:       input.Password,
		ProfieImageURL: result.Location,
	}

	user, err = mysql.InsertUser(user)

	userPayload := &model.User{
		UserID:         int(user.ID),
		Name:           user.Name,
		Password:       user.Password,
		ProfieImageURL: user.ProfieImageURL,
		HaveAnime:      nil,
	}
	if err != nil {
		return userPayload, err
	}

	return userPayload, nil
}

// CreateAnimeRanking is the resolver for the createAnimeRanking field.
func (r *mutationResolver) CreateAnimeRanking(ctx context.Context, input model.NewAnimeRankingInput) (*model.AnimeRanking, error) {
	customClaim := middlewares.CtxValue(ctx)

	result, err := application.AWSS3Upload(input.AnimeImage.File, input.AnimeImage.Filename)
	if err != nil {
		return nil, err
	}

	anime := table.AnimeRanking{
		UserID:        customClaim.ID,
		Title:         input.Title,
		Rank:          input.Rank,
		Description:   input.Description,
		AnimeImageURL: result.Location,
	}

	anime, err = mysql.InsertAnimeRanking(anime)
	if err != nil {
		return nil, err
	}

	return &model.AnimeRanking{
		AnimeID:       int(anime.ID),
		Title:         anime.Title,
		Rank:          anime.Rank,
		Description:   &anime.Description,
		AnimeImageURL: result.Location,
	}, nil
}

// UpdateAnimeRanking is the resolver for the updateAnimeRanking field.
func (r *mutationResolver) UpdateAnimeRanking(ctx context.Context, id int, input model.NewAnimeRankingInput) (*model.AnimeRanking, error) {
	panic(fmt.Errorf("not implemented: UpdateAnimeRanking - updateAnimeRanking"))
}

// DeleteAnimeRanking is the resolver for the deleteAnimeRanking field.
func (r *mutationResolver) DeleteAnimeRanking(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAnimeRanking - deleteAnimeRanking"))
}

// GetAllUserInformation is the resolver for the GetAllUserInformation field.
func (r *queryResolver) GetAllUserInformation(ctx context.Context) ([]*model.User, error) {
	users, err := mysql.GetAllUsers()
	if err != nil {
		return nil, err
	}

	newUsers := make([]*model.User, len(users))
	for i, user := range users {
		newUsers[i] = &model.User{
			UserID:         int(user.ID),
			Name:           user.Name,
			Password:       user.Password,
			ProfieImageURL: user.ProfieImageURL,
			HaveAnime:      nil, // HaveAnimeフィールドは初期値をnilに設定
		}
	}
	return newUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*model.User, error) {
	tableUser, err := mysql.GetUserByID(id)
	if err != nil {
		return nil, err
	}
	user := model.User{
		UserID:         int(tableUser.ID),
		Name:           tableUser.Name,
		Password:       tableUser.Password,
		ProfieImageURL: tableUser.ProfieImageURL,
		HaveAnime:      nil,
	}
	return &user, nil
}

// GetAnimeRanking is the resolver for the getAnimeRanking field.
func (r *queryResolver) GetAnimeRanking(ctx context.Context, id int) (*model.AnimeRanking, error) {
	anime, err := mysql.GetAnimeRankingByID(id)
	if err != nil {
		return nil, err
	}
	result := &model.AnimeRanking{
		AnimeID:       int(anime.ID),
		Title:         anime.Title,
		Rank:          anime.Rank,
		Description:   &anime.Description,
		AnimeImageURL: anime.AnimeImageURL,
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
